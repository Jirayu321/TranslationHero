{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"value\", \"onChange\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport { PickerStaticWrapper, usePickerState } from '@mui/x-date-pickers/internals';\nimport { useDateRangeValidation } from '../internal/hooks/validation/useDateRangeValidation';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { useDateRangePickerDefaultizedProps, dateRangePickerValueManager } from '../DateRangePicker/shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://mui.com/x/api/date-pickers/static-date-range-picker/)\n */\n\nexport const StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n  const props = useDateRangePickerDefaultizedProps(inProps, 'MuiStaticDateRangePicker');\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n  const validationError = useDateRangeValidation(props);\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, dateRangePickerValueManager);\n\n  const {\n    displayStaticWrapperAs = 'mobile',\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    validationError,\n    components,\n    componentsProps,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, _extends({\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    components: components,\n    componentsProps: componentsProps\n  }, wrapperProps, {\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      components: components,\n      componentsProps: componentsProps\n    }, pickerProps, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useLicenseVerifier","PickerStaticWrapper","usePickerState","useDateRangeValidation","DateRangePickerView","getReleaseInfo","useDateRangePickerDefaultizedProps","dateRangePickerValueManager","jsx","_jsx","releaseInfo","StaticDateRangePicker","forwardRef","inProps","ref","props","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","validationError","pickerProps","inputProps","wrapperProps","displayStaticWrapperAs","components","componentsProps","other","DateInputProps","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","autoFocus","bool","calendars","oneOf","className","string","closeOnSelect","object","dayOfWeekFormatter","func","defaultCalendarMonth","any","disableAutoMonthSwitching","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","endText","node","getOpenDialogAriaText","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","label","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onError","onMonthChange","onViewChange","OpenPickerButtonProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","startText","toolbarFormat","toolbarTitle","value","arrayOf"],"sources":["/Users/jirayuyungmeesuk/Desktop/translate-hero/client/node_modules/@mui/x-date-pickers-pro/StaticDateRangePicker/StaticDateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"displayStaticWrapperAs\", \"value\", \"onChange\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport { PickerStaticWrapper, usePickerState } from '@mui/x-date-pickers/internals';\nimport { useDateRangeValidation } from '../internal/hooks/validation/useDateRangeValidation';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { useDateRangePickerDefaultizedProps, dateRangePickerValueManager } from '../DateRangePicker/shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://mui.com/x/api/date-pickers/static-date-range-picker/)\n */\nexport const StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n  const props = useDateRangePickerDefaultizedProps(inProps, 'MuiStaticDateRangePicker');\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n  const validationError = useDateRangeValidation(props);\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, dateRangePickerValueManager);\n\n  const {\n    displayStaticWrapperAs = 'mobile',\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    validationError,\n    components,\n    componentsProps,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(PickerStaticWrapper, _extends({\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    components: components,\n    componentsProps: componentsProps\n  }, wrapperProps, {\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      components: components,\n      componentsProps: componentsProps\n    }, pickerProps, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;"],"mappings":"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E;AACF;AACA;AACA;AACA;EACE4B,OAAO,EAAEvE,SAAS,CAACuC,IA/JqD;;EAiKxE;AACF;AACA;AACA;EACEiC,IAAI,EAAExE,SAAS,CAAC2C,MArKwD;;EAuKxE;AACF;AACA;EACE8B,OAAO,EAAEzE,SAAS,CAACiD,GA1KqD;;EA4KxE;AACF;AACA;EACEyB,OAAO,EAAE1E,SAAS,CAACiD,GA/KqD;;EAiLxE;AACF;AACA;AACA;AACA;EACE0B,QAAQ,EAAE3E,SAAS,CAAC+C,IAtLoD;;EAwLxE;AACF;AACA;AACA;AACA;AACA;EACE6B,QAAQ,EAAE5E,SAAS,CAAC+C,IAAV,CAAe8B,UA9L+C;;EAgMxE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE9E,SAAS,CAAC+C,IA5MqD;;EA8MxE;AACF;AACA;AACA;AACA;AACA;EACEgC,aAAa,EAAE/E,SAAS,CAAC+C,IApN+C;;EAsNxE;AACF;AACA;AACA;EACEiC,YAAY,EAAEhF,SAAS,CAAC+C,IA1NgD;;EA4NxE;AACF;AACA;EACEkC,qBAAqB,EAAEjF,SAAS,CAAC6C,MA/NuC;;EAiOxE;AACF;AACA;AACA;EACEqC,QAAQ,EAAElF,SAAS,CAACuC,IArOoD;;EAuOxE;AACF;AACA;AACA;EACE4C,gBAAgB,EAAEnF,SAAS,CAACuC,IA3O4C;;EA6OxE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE6C,SAAS,EAAEpF,SAAS,CAAC+C,IArPmD;;EAuPxE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsC,WAAW,EAAErF,SAAS,CAAC+C,IAAV,CAAe8B,UA5Q4C;;EA8QxE;AACF;AACA;AACA;AACA;EACES,aAAa,EAAEtF,SAAS,CAAC+C,IAnR+C;;EAqRxE;AACF;AACA;AACA;AACA;EACEwC,aAAa,EAAEvF,SAAS,CAAC+C,IA1R+C;;EA4RxE;AACF;AACA;AACA;EACEyC,oBAAoB,EAAExF,SAAS,CAAC2C,MAhSwC;;EAkSxE;AACF;AACA;AACA;AACA;AACA;EACE8C,iBAAiB,EAAEzF,SAAS,CAAC+C,IAxS2C;;EA0SxE;AACF;AACA;AACA;AACA;AACA;AACA;EACE2C,kBAAkB,EAAE1F,SAAS,CAAC+C,IAjT0C;;EAmTxE;AACF;AACA;AACA;AACA;AACA;AACA;EACE4C,iBAAiB,EAAE3F,SAAS,CAAC+C,IA1T2C;;EA4TxE;AACF;AACA;AACA;EACE6C,2BAA2B,EAAE5F,SAAS,CAACuC,IAhUiC;;EAkUxE;AACF;AACA;EACEsD,WAAW,EAAE7F,SAAS,CAACuC,IArUiD;;EAuUxE;AACF;AACA;AACA;AACA;EACEuD,SAAS,EAAE9F,SAAS,CAAC0D,IA5UmD;;EA8UxE;AACF;AACA;EACEqC,aAAa,EAAE/F,SAAS,CAAC2C,MAjV+C;;EAmVxE;AACF;AACA;AACA;EACEqD,YAAY,EAAEhG,SAAS,CAAC0D,IAvVgD;;EAyVxE;AACF;AACA;EACEuC,KAAK,EAAEjG,SAAS,CAACkG,OAAV,CAAkBlG,SAAS,CAACiD,GAA5B,EAAiC4B;AA5VgC,CAA1E,GA6VI,KAAK,CA7VT"},"metadata":{},"sourceType":"module"}