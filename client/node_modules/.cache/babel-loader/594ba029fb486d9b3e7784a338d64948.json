{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildDeprecatedPropsWarning, useDefaultDates, useLocaleText, useUtils } from '@mui/x-date-pickers/internals';\nimport { useThemeProps } from '@mui/material/styles';\nimport { parseRangeInputValue } from '../internal/utils/date-utils';\nconst deprecatedPropsWarning = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');\nexport function useDateRangePickerDefaultizedProps(props, name) {\n  var _themeProps$startText, _themeProps$endText;\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates(); // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  deprecatedPropsWarning({\n    startText: themeProps.startText,\n    endText: themeProps.endText\n  });\n  const localeText = useLocaleText();\n  const startText = (_themeProps$startText = themeProps.startText) != null ? _themeProps$startText : localeText.start;\n  const endText = (_themeProps$endText = themeProps.endText) != null ? _themeProps$endText : localeText.end;\n  return _extends({\n    calendars: 2,\n    inputFormat: utils.formats.keyboardDate,\n    minDate: defaultDates.minDate,\n    maxDate: defaultDates.maxDate\n  }, themeProps, {\n    endText,\n    startText\n  });\n}\nexport const dateRangePickerValueManager = {\n  emptyValue: [null, null],\n  getTodayValue: utils => [utils.date(), utils.date()],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};","map":{"version":3,"names":["_extends","buildDeprecatedPropsWarning","useDefaultDates","useLocaleText","useUtils","useThemeProps","parseRangeInputValue","deprecatedPropsWarning","useDateRangePickerDefaultizedProps","props","name","_themeProps$startText","_themeProps$endText","utils","defaultDates","themeProps","startText","endText","localeText","start","end","calendars","inputFormat","formats","keyboardDate","minDate","maxDate","dateRangePickerValueManager","emptyValue","getTodayValue","date","parseInput","areValuesEqual","a","b","isEqual"],"sources":["/Users/jirayuyungmeesuk/Desktop/translate-hero/client/node_modules/@mui/x-date-pickers-pro/DateRangePicker/shared.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildDeprecatedPropsWarning, useDefaultDates, useLocaleText, useUtils } from '@mui/x-date-pickers/internals';\nimport { useThemeProps } from '@mui/material/styles';\nimport { parseRangeInputValue } from '../internal/utils/date-utils';\nconst deprecatedPropsWarning = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');\nexport function useDateRangePickerDefaultizedProps(props, name) {\n  var _themeProps$startText, _themeProps$endText;\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates(); // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  deprecatedPropsWarning({\n    startText: themeProps.startText,\n    endText: themeProps.endText\n  });\n  const localeText = useLocaleText();\n  const startText = (_themeProps$startText = themeProps.startText) != null ? _themeProps$startText : localeText.start;\n  const endText = (_themeProps$endText = themeProps.endText) != null ? _themeProps$endText : localeText.end;\n  return _extends({\n    calendars: 2,\n    inputFormat: utils.formats.keyboardDate,\n    minDate: defaultDates.minDate,\n    maxDate: defaultDates.maxDate\n  }, themeProps, {\n    endText,\n    startText\n  });\n}\nexport const dateRangePickerValueManager = {\n  emptyValue: [null, null],\n  getTodayValue: utils => [utils.date(), utils.date()],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,2BAAT,EAAsCC,eAAtC,EAAuDC,aAAvD,EAAsEC,QAAtE,QAAsF,+BAAtF;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,MAAMC,sBAAsB,GAAGN,2BAA2B,CAAC,mHAAD,CAA1D;AACA,OAAO,SAASO,kCAAT,CAA4CC,KAA5C,EAAmDC,IAAnD,EAAyD;EAC9D,IAAIC,qBAAJ,EAA2BC,mBAA3B;;EAEA,MAAMC,KAAK,GAAGT,QAAQ,EAAtB;EACA,MAAMU,YAAY,GAAGZ,eAAe,EAApC,CAJ8D,CAItB;EACxC;;EAEA,MAAMa,UAAU,GAAGV,aAAa,CAAC;IAC/BI,KAD+B;IAE/BC;EAF+B,CAAD,CAAhC;EAIAH,sBAAsB,CAAC;IACrBS,SAAS,EAAED,UAAU,CAACC,SADD;IAErBC,OAAO,EAAEF,UAAU,CAACE;EAFC,CAAD,CAAtB;EAIA,MAAMC,UAAU,GAAGf,aAAa,EAAhC;EACA,MAAMa,SAAS,GAAG,CAACL,qBAAqB,GAAGI,UAAU,CAACC,SAApC,KAAkD,IAAlD,GAAyDL,qBAAzD,GAAiFO,UAAU,CAACC,KAA9G;EACA,MAAMF,OAAO,GAAG,CAACL,mBAAmB,GAAGG,UAAU,CAACE,OAAlC,KAA8C,IAA9C,GAAqDL,mBAArD,GAA2EM,UAAU,CAACE,GAAtG;EACA,OAAOpB,QAAQ,CAAC;IACdqB,SAAS,EAAE,CADG;IAEdC,WAAW,EAAET,KAAK,CAACU,OAAN,CAAcC,YAFb;IAGdC,OAAO,EAAEX,YAAY,CAACW,OAHR;IAIdC,OAAO,EAAEZ,YAAY,CAACY;EAJR,CAAD,EAKZX,UALY,EAKA;IACbE,OADa;IAEbD;EAFa,CALA,CAAf;AASD;AACD,OAAO,MAAMW,2BAA2B,GAAG;EACzCC,UAAU,EAAE,CAAC,IAAD,EAAO,IAAP,CAD6B;EAEzCC,aAAa,EAAEhB,KAAK,IAAI,CAACA,KAAK,CAACiB,IAAN,EAAD,EAAejB,KAAK,CAACiB,IAAN,EAAf,CAFiB;EAGzCC,UAAU,EAAEzB,oBAH6B;EAIzC0B,cAAc,EAAE,CAACnB,KAAD,EAAQoB,CAAR,EAAWC,CAAX,KAAiBrB,KAAK,CAACsB,OAAN,CAAcF,CAAC,CAAC,CAAD,CAAf,EAAoBC,CAAC,CAAC,CAAD,CAArB,KAA6BrB,KAAK,CAACsB,OAAN,CAAcF,CAAC,CAAC,CAAD,CAAf,EAAoBC,CAAC,CAAC,CAAD,CAArB;AAJrB,CAApC"},"metadata":{},"sourceType":"module"}